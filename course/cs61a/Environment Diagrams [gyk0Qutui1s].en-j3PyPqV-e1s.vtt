WEBVTT
Kind: captions
Language: en

00:00:00.980 --> 00:00:05.350
PROFESSOR: Next, we'll talk
about environment diagrams.

00:00:05.350 --> 00:00:09.850
So environment diagrams
are a way for us

00:00:09.850 --> 00:00:14.950
to keep track of what's going
on within the Python interpreter

00:00:14.950 --> 00:00:18.560
when it executes a
program that we type in.

00:00:18.560 --> 00:00:20.340
Environments are real things.

00:00:20.340 --> 00:00:24.560
So they are the way in which an
interpreter for a programming

00:00:24.560 --> 00:00:28.010
language keeps track
of what names mean.

00:00:28.010 --> 00:00:31.220
So it's sort of
memory that keeps

00:00:31.220 --> 00:00:35.360
track of the bindings
between names and values.

00:00:35.360 --> 00:00:38.690
So we're going to draw pictures
of what they look like.

00:00:38.690 --> 00:00:42.580
And this will help you become
a better computer scientist.

00:00:42.580 --> 00:00:45.100
Lots of what computer
scientists do

00:00:45.100 --> 00:00:50.350
is draw pictures that involve
boxes and arrows pointing

00:00:50.350 --> 00:00:51.790
to other boxes.

00:00:51.790 --> 00:00:53.680
It's just a huge part
of the discipline,

00:00:53.680 --> 00:00:56.230
so you might as well start now.

00:00:56.230 --> 00:00:58.990
Okay, so an environment
diagram is there

00:00:58.990 --> 00:01:01.060
to visualize the
interpreter's process

00:01:01.060 --> 00:01:05.110
so that we can really understand
how programs get executed.

00:01:05.110 --> 00:01:07.010
And they look like this.

00:01:07.010 --> 00:01:09.370
So you have some
code on the left,

00:01:09.370 --> 00:01:13.780
and then you have some
frames on the right.

00:01:13.780 --> 00:01:17.080
And the code is just regular
Python code with some arrows

00:01:17.080 --> 00:01:20.380
to indicate where we are in
the process of execution.

00:01:20.380 --> 00:01:22.510
And the frames keep
track of the bindings

00:01:22.510 --> 00:01:24.858
between names and values.

00:01:24.858 --> 00:01:27.400
Okay, so the code's on the left,
the frames are on the right.

00:01:27.400 --> 00:01:31.140
Within the code, there are
statements and expressions.

00:01:31.140 --> 00:01:33.650
So we see an import statement
and an assignment statement

00:01:33.650 --> 00:01:35.920
here.

00:01:35.920 --> 00:01:38.720
The arrows indicate
the evaluation order.

00:01:38.720 --> 00:01:42.160
So the gray one says
this was just executed.

00:01:42.160 --> 00:01:44.920
And the red one says
this is next to execute.

00:01:44.920 --> 00:01:47.590
It hasn't happened yet.

00:01:47.590 --> 00:01:51.910
Okay, frames on the right
show bindings between names,

00:01:51.910 --> 00:01:55.120
pi is a name, and values.

00:01:55.120 --> 00:01:57.950
There's a name,
there is a value.

00:01:57.950 --> 00:02:00.590
Within a frame-- this
is hugely important.

00:02:00.590 --> 00:02:02.420
This is part of
the Python process.

00:02:02.420 --> 00:02:05.780
Within a frame, a name
cannot be repeated.

00:02:05.780 --> 00:02:10.139
It has to be bound to
at most, one value.

00:02:10.139 --> 00:02:12.900
We saw the consequences of
this when we rebounded the name

00:02:12.900 --> 00:02:14.460
max to a new number.

00:02:14.460 --> 00:02:16.860
Instead of the
original function,

00:02:16.860 --> 00:02:19.330
the old binding was lost.

00:02:19.330 --> 00:02:22.980
Okay, so those are code on
the left, frames on the right,

00:02:22.980 --> 00:02:25.140
and environment diagram.

00:02:25.140 --> 00:02:28.560
These are going to get more
complicated, but also more

00:02:28.560 --> 00:02:29.610
necessary.

00:02:29.610 --> 00:02:33.510
Because when there are lots of
names repeated in various ways,

00:02:33.510 --> 00:02:37.590
we'll need to be able to keep
track of what they really mean.

00:02:37.590 --> 00:02:40.920
These things get drawn
for you automatically.

00:02:40.920 --> 00:02:43.700
So here's the web
interface to what's

00:02:43.700 --> 00:02:47.110
called the Online Python Tutor.

00:02:47.110 --> 00:02:49.780
So here's the code that we
typed in from math import pi.

00:02:49.780 --> 00:02:51.280
You can edit this.

00:02:51.280 --> 00:02:54.520
And then you click
visualize execution

00:02:54.520 --> 00:02:56.770
and you get your
code on your left

00:02:56.770 --> 00:02:58.520
and your frames on the right.

00:02:58.520 --> 00:03:01.510
And as you walk through
each line of code

00:03:01.510 --> 00:03:04.960
by pressing forward, you see
the consequences of executing.

00:03:04.960 --> 00:03:09.160
First is import statement,
bound the name pi to its value.

00:03:09.160 --> 00:03:10.600
And the next thing
that happened,

00:03:10.600 --> 00:03:13.270
is that the assignment
statement bound the name tau

00:03:13.270 --> 00:03:15.360
to 2 times pi.

00:03:15.360 --> 00:03:18.060
And here is the result
at the end of the day.

00:03:18.060 --> 00:03:21.800
So when you're confused
about what a program does,

00:03:21.800 --> 00:03:25.390
paste it in to the
Online Python Tutor

00:03:25.390 --> 00:03:27.250
and it will show
you exactly what

00:03:27.250 --> 00:03:30.220
happens throughout the
course of execution.

00:03:30.220 --> 00:03:33.130
That's the whole point.

00:03:33.130 --> 00:03:36.590
Okay, so that's what an
environment diagram looks like.

00:03:36.590 --> 00:03:40.340
Now we can talk about exactly
what assignment statements do.

00:03:40.340 --> 00:03:45.160
They change the bindings between
names and values in frames.

00:03:45.160 --> 00:03:50.950
So here is-- there is
an environment diagram

00:03:50.950 --> 00:03:53.790
for three lines of code.

00:03:53.790 --> 00:03:56.370
Just executed with b equals 2.

00:03:56.370 --> 00:04:00.960
Next to execute is this
larger assignment statement

00:04:00.960 --> 00:04:02.760
that has two names
on the left and two

00:04:02.760 --> 00:04:04.830
expressions on the right.

00:04:04.830 --> 00:04:08.850
Now, there is an execution
rule for assignment statements

00:04:08.850 --> 00:04:11.820
that you need to understand,
because Python always

00:04:11.820 --> 00:04:14.050
does the same thing
over and over again.

00:04:14.050 --> 00:04:16.380
And here's what it does
for assignment statements.

00:04:16.380 --> 00:04:18.510
It evaluates all
of the expressions

00:04:18.510 --> 00:04:22.860
to the right of equals
from left to right.

00:04:22.860 --> 00:04:26.580
Then, after evaluating
all those expressions,

00:04:26.580 --> 00:04:29.670
it binds all the names
to the left of equals

00:04:29.670 --> 00:04:32.430
to the resulting values.

00:04:32.430 --> 00:04:35.300
So in this case, here
are all the expressions

00:04:35.300 --> 00:04:36.680
to the right of equals.

00:04:36.680 --> 00:04:41.900
We get a plus b, which
evaluates to 1 plus 2 is 3.

00:04:41.900 --> 00:04:43.710
So this evaluates to 3.

00:04:43.710 --> 00:04:46.130
B evaluates to 2.

00:04:46.130 --> 00:04:47.810
And then second step.

00:04:47.810 --> 00:04:51.290
Bind all names to the left of
equals to the resulting values.

00:04:51.290 --> 00:04:56.030
So b will be bound to 3
and a will be bound to 2,

00:04:56.030 --> 00:04:58.990
the value of that expression.

00:04:58.990 --> 00:05:02.050
Okay, so if we hit forward
in the environment diagram

00:05:02.050 --> 00:05:08.680
generator, the just executed
arrow will now be on line 3

00:05:08.680 --> 00:05:13.045
and the global frame will have
a bound to 2 and b bound to 3.

00:05:20.090 --> 00:05:22.970
Okay, so now we can do
the complicated case

00:05:22.970 --> 00:05:24.860
that I asked you to
solve by yourselves.

00:05:27.470 --> 00:05:30.830
Let's just do it live
in the Python Tutor.

00:05:30.830 --> 00:05:32.310
Okay, so here was the question.

00:05:32.310 --> 00:05:35.030
What happens if I say f
equals min then f equals max,

00:05:35.030 --> 00:05:38.180
then g,h equals min
max and max equals g,

00:05:38.180 --> 00:05:43.070
then this large nested
call expression?

00:05:43.070 --> 00:05:45.120
Well, let's watch
and see what happens.

00:05:45.120 --> 00:05:48.440
So the first thing that
happens that f is bound to min.

00:05:48.440 --> 00:05:51.170
This is the min function,
a representation

00:05:51.170 --> 00:05:53.030
in the environment
diagram that's

00:05:53.030 --> 00:05:54.980
similar to the
angled bracket thing

00:05:54.980 --> 00:06:00.170
that you saw when
Python printed it out.

00:06:00.170 --> 00:06:02.780
Then we bind f to max.

00:06:02.780 --> 00:06:05.180
Now remember the
rule that a name

00:06:05.180 --> 00:06:09.210
can be bound to at most,
one value in a frame.

00:06:09.210 --> 00:06:12.830
So since we've rebound
f to max, we've

00:06:12.830 --> 00:06:15.410
lost the binding
between f and min.

00:06:15.410 --> 00:06:17.720
That's just gone.

00:06:17.720 --> 00:06:20.750
Okay, now we say g and h
are bound to min and max.

00:06:20.750 --> 00:06:23.450
So we evaluate min
as the min function,

00:06:23.450 --> 00:06:25.850
we evaluate max as
the max function,

00:06:25.850 --> 00:06:29.780
and we bind g and
h to min and max.

00:06:29.780 --> 00:06:31.430
Notice, there's only
one min function.

00:06:31.430 --> 00:06:32.960
There's only one max function.

00:06:32.960 --> 00:06:36.050
But the max function
has two names, f and h.

00:06:36.050 --> 00:06:38.300
The min function has the name g.

00:06:38.300 --> 00:06:41.090
Now there's also the name
max for the max function,

00:06:41.090 --> 00:06:42.980
and the name min for
the min function.

00:06:42.980 --> 00:06:46.010
Those are built in, and they're
part of the global frame,

00:06:46.010 --> 00:06:48.710
but we don't write them down,
because if we had to write down

00:06:48.710 --> 00:06:51.020
all the built-in names,
then that would take up

00:06:51.020 --> 00:06:51.837
too much space.

00:06:51.837 --> 00:06:53.670
So we only write them
down when they change,

00:06:53.670 --> 00:06:55.470
which is about to
be what happens.

00:06:55.470 --> 00:06:59.090
So when I say max equals
g, using the execution

00:06:59.090 --> 00:07:02.900
rule for assignment statements,
we first evaluate g.

00:07:02.900 --> 00:07:05.870
G evaluates to the
min function, then

00:07:05.870 --> 00:07:08.250
we bind the name
max to that value.

00:07:08.250 --> 00:07:10.460
So now max means min.

00:07:13.140 --> 00:07:15.870
Jeepers, that is
complicated, isn't it?

00:07:15.870 --> 00:07:19.980
Okay, so then we say max of f
of 2, of g of h, of 1 and 5,

00:07:19.980 --> 00:07:21.840
3 and 4.

00:07:21.840 --> 00:07:25.800
And that involves evaluating
all of these different operand

00:07:25.800 --> 00:07:27.480
expressions in turn.

00:07:27.480 --> 00:07:31.750
Before I hit forward, let's
just watch how that goes.

00:07:31.750 --> 00:07:35.450
So we can draw an
expression tree

00:07:35.450 --> 00:07:40.310
that evaluates the operator
and operands of the call

00:07:40.310 --> 00:07:44.070
expressions and the operand
subexpressions within them.

00:07:44.070 --> 00:07:48.470
So remember the rule for
evaluating a call expression.

00:07:48.470 --> 00:07:53.530
First you evaluate the
operator, which in this case,

00:07:53.530 --> 00:08:00.010
is max the name refers to
the function which minimizes.

00:08:00.010 --> 00:08:03.310
Then we evaluate the operands.

00:08:03.310 --> 00:08:06.590
And the first operand
looks like that.

00:08:06.590 --> 00:08:10.720
And we have to apply our rule
for evaluating call expressions

00:08:10.720 --> 00:08:11.270
again.

00:08:11.270 --> 00:08:14.470
Evaluate the operator,
evaluate the operands.

00:08:14.470 --> 00:08:16.750
This operand is complex.

00:08:16.750 --> 00:08:18.400
So we evaluate it.

00:08:18.400 --> 00:08:19.960
G refers to the min.

00:08:19.960 --> 00:08:22.540
We see that here in the
environment diagram.

00:08:22.540 --> 00:08:25.720
h 1 and 5 is another
call expression.

00:08:25.720 --> 00:08:28.660
We evaluate that by first
evaluating the operator.

00:08:28.660 --> 00:08:32.380
h is the max function,
1 and 5 are 1 and 5.

00:08:32.380 --> 00:08:37.250
And so the max of 1 and 5 is 5.

00:08:37.250 --> 00:08:43.580
Now we take the min of
5 and 3 and we get 3.

00:08:43.580 --> 00:08:48.500
Now we're going to take the
max of 2 and 3 and we'll get 3.

00:08:48.500 --> 00:08:51.560
And then we'll take
the min of 3 and 4

00:08:51.560 --> 00:08:56.750
and we will get 3, which is
the value of the whole thing.

00:08:56.750 --> 00:09:00.220
Congratulations if you picked 3.

